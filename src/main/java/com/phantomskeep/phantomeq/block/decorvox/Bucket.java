package com.phantomskeep.phantomeq.block.decorvox;

import com.phantomskeep.phantomeq.block.rotators.DecorRotator;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

import java.util.stream.Stream;

public class Bucket extends DecorRotator {

    public Bucket() {
        super(NORTH, EAST, SOUTH, WEST);
    }

    public static final VoxelShape NORTH = Stream.of(
            Block.box(2, 2, 4, 3, 10, 12),
            Block.box(4, 2, 13, 12, 10, 14),
            Block.box(4, 2, 2, 12, 10, 3),
            Block.box(13, 2, 4, 14, 10, 12),
            Block.box(4, 0, 4, 12, 1, 12),
            Block.box(3, 1, 3, 5, 2, 5),
            Block.box(11, 1, 3, 13, 2, 5),
            Block.box(5, 1, 3, 11, 2, 4),
            Block.box(3, 1, 5, 4, 2, 11),
            Block.box(12, 1, 5, 13, 2, 11),
            Block.box(5, 1, 12, 11, 2, 13),
            Block.box(3, 11, 14, 13, 12, 15),
            Block.box(3, 11, 1, 13, 12, 2),
            Block.box(1, 11, 3, 2, 12, 13),
            Block.box(2, 1, 5, 3, 2, 11),
            Block.box(2, 10, 3, 3, 11, 13),
            Block.box(13, 10, 3, 14, 11, 13),
            Block.box(3, 10, 2, 13, 11, 3),
            Block.box(3, 10, 13, 13, 11, 14),
            Block.box(13, 1, 5, 14, 2, 11),
            Block.box(5, 1, 2, 11, 2, 3),
            Block.box(5, 1, 13, 11, 2, 14),
            Block.box(14, 11, 3, 15, 12, 13),
            Block.box(13, 11, 12, 14, 12, 13),
            Block.box(12, 11, 13, 13, 12, 14),
            Block.box(13, 11, 13, 14, 12, 14),
            Block.box(13, 11, 2, 14, 12, 3),
            Block.box(12, 11, 2, 13, 12, 3),
            Block.box(2, 11, 3, 3, 12, 4),
            Block.box(2, 11, 2, 3, 12, 3),
            Block.box(3, 11, 2, 4, 12, 3),
            Block.box(3, 11, 13, 4, 12, 14),
            Block.box(2, 11, 13, 3, 12, 14),
            Block.box(2, 11, 12, 3, 12, 13),
            Block.box(11, 1, 11, 13, 2, 13),
            Block.box(3, 1, 11, 5, 2, 13),
            Block.box(3, 2, 3, 4, 10, 4),
            Block.box(3, 2, 12, 4, 10, 13),
            Block.box(12, 2, 12, 13, 10, 13),
            Block.box(12, 2, 3, 13, 10, 4),
            Block.box(13, 11, 3, 14, 12, 4),
            Block.box(0, 9.383883476483184, 4.087941930464792, 1, 10.383883476483184, 12.087941930464792),
            Block.box(1, 9.383883476483184, 3.087941930464792, 2, 10.383883476483184, 4.087941930464792),
            Block.box(14, 9.383883476483184, 3.087941930464792, 15, 10.383883476483184, 4.087941930464792),
            Block.box(15, 9.383883476483184, 4.087941930464792, 16, 10.383883476483184, 12.087941930464792),
            Block.box(2, 0.13083514927824424, 3.5732233047033617, 14, 1.1308351492782442, 4.573223304703362)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape EAST = Stream.of(
            Block.box(3.957106781186548, 2, 1.957106781186548, 11.957106781186548, 10, 2.957106781186548),
            Block.box(1.957106781186548, 2, 3.957106781186548, 2.957106781186548, 10, 11.957106781186548),
            Block.box(12.957106781186548, 2, 3.957106781186548, 13.957106781186548, 10, 11.957106781186548),
            Block.box(3.957106781186548, 2, 12.957106781186548, 11.957106781186548, 10, 13.957106781186548),
            Block.box(3.957106781186548, 0, 3.957106781186548, 11.957106781186548, 1, 11.957106781186548),
            Block.box(10.957106781186548, 1, 2.957106781186548, 12.957106781186548, 2, 4.957106781186548),
            Block.box(10.957106781186548, 1, 10.957106781186548, 12.957106781186548, 2, 12.957106781186548),
            Block.box(11.957106781186548, 1, 4.957106781186548, 12.957106781186548, 2, 10.957106781186548),
            Block.box(4.957106781186548, 1, 2.957106781186548, 10.957106781186548, 2, 3.957106781186548),
            Block.box(4.957106781186548, 1, 11.957106781186548, 10.957106781186548, 2, 12.957106781186548),
            Block.box(2.957106781186548, 1, 4.957106781186548, 3.957106781186548, 2, 10.957106781186548),
            Block.box(0.9571067811865479, 11, 2.957106781186548, 1.957106781186548, 12, 12.957106781186548),
            Block.box(13.957106781186548, 11, 2.957106781186548, 14.957106781186548, 12, 12.957106781186548),
            Block.box(2.957106781186548, 11, 0.9571067811865479, 12.957106781186548, 12, 1.957106781186548),
            Block.box(4.957106781186548, 1, 1.957106781186548, 10.957106781186548, 2, 2.957106781186548),
            Block.box(2.957106781186548, 10, 1.957106781186548, 12.957106781186548, 11, 2.957106781186548),
            Block.box(2.957106781186548, 10, 12.957106781186548, 12.957106781186548, 11, 13.957106781186548),
            Block.box(12.957106781186548, 10, 2.957106781186548, 13.957106781186548, 11, 12.957106781186548),
            Block.box(1.957106781186548, 10, 2.957106781186548, 2.957106781186548, 11, 12.957106781186548),
            Block.box(4.957106781186548, 1, 12.957106781186548, 10.957106781186548, 2, 13.957106781186548),
            Block.box(12.957106781186548, 1, 4.957106781186548, 13.957106781186548, 2, 10.957106781186548),
            Block.box(1.957106781186548, 1, 4.957106781186548, 2.957106781186548, 2, 10.957106781186548),
            Block.box(2.957106781186548, 11, 13.957106781186548, 12.957106781186548, 12, 14.957106781186548),
            Block.box(2.957106781186548, 11, 12.957106781186548, 3.957106781186548, 12, 13.957106781186548),
            Block.box(1.957106781186548, 11, 11.957106781186548, 2.957106781186548, 12, 12.957106781186548),
            Block.box(1.957106781186548, 11, 12.957106781186548, 2.957106781186548, 12, 13.957106781186548),
            Block.box(12.957106781186548, 11, 12.957106781186548, 13.957106781186548, 12, 13.957106781186548),
            Block.box(12.957106781186548, 11, 11.957106781186548, 13.957106781186548, 12, 12.957106781186548),
            Block.box(11.957106781186548, 11, 1.957106781186548, 12.957106781186548, 12, 2.957106781186548),
            Block.box(12.957106781186548, 11, 1.957106781186548, 13.957106781186548, 12, 2.957106781186548),
            Block.box(12.957106781186548, 11, 2.957106781186548, 13.957106781186548, 12, 3.957106781186548),
            Block.box(1.957106781186548, 11, 2.957106781186548, 2.957106781186548, 12, 3.957106781186548),
            Block.box(1.957106781186548, 11, 1.957106781186548, 2.957106781186548, 12, 2.957106781186548),
            Block.box(2.957106781186548, 11, 1.957106781186548, 3.957106781186548, 12, 2.957106781186548),
            Block.box(2.957106781186548, 1, 10.957106781186548, 4.957106781186548, 2, 12.957106781186548),
            Block.box(2.957106781186548, 1, 2.957106781186548, 4.957106781186548, 2, 4.957106781186548),
            Block.box(11.957106781186548, 2, 2.957106781186548, 12.957106781186548, 10, 3.957106781186548),
            Block.box(2.957106781186548, 2, 2.957106781186548, 3.957106781186548, 10, 3.957106781186548),
            Block.box(2.957106781186548, 2, 11.957106781186548, 3.957106781186548, 10, 12.957106781186548),
            Block.box(11.957106781186548, 2, 11.957106781186548, 12.957106781186548, 10, 12.957106781186548),
            Block.box(11.957106781186548, 11, 12.957106781186548, 12.957106781186548, 12, 13.957106781186548),
            Block.box(3.8691648507217558, 9.383883476483184, -0.042893218813452094, 11.869164850721756, 10.383883476483184, 0.9571067811865479),
            Block.box(11.869164850721756, 9.383883476483184, 0.9571067811865479, 12.869164850721756, 10.383883476483184, 1.957106781186548),
            Block.box(11.869164850721756, 9.383883476483184, 13.957106781186548, 12.869164850721756, 10.383883476483184, 14.957106781186548),
            Block.box(3.8691648507217558, 9.383883476483184, 14.957106781186548, 11.869164850721756, 10.383883476483184, 15.957106781186548),
            Block.box(11.383883476483186, 0.13083514927824424, 1.957106781186548, 12.383883476483186, 1.1308351492782442, 13.957106781186548)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape SOUTH = Stream.of(
            Block.box(13, 2, 3.914213562373096, 14, 10, 11.914213562373096),
            Block.box(4, 2, 1.9142135623730958, 12, 10, 2.914213562373096),
            Block.box(4, 2, 12.914213562373096, 12, 10, 13.914213562373096),
            Block.box(2, 2, 3.914213562373096, 3, 10, 11.914213562373096),
            Block.box(4, 0, 3.914213562373096, 12, 1, 11.914213562373096),
            Block.box(11, 1, 10.914213562373096, 13, 2, 12.914213562373096),
            Block.box(3, 1, 10.914213562373096, 5, 2, 12.914213562373096),
            Block.box(5, 1, 11.914213562373096, 11, 2, 12.914213562373096),
            Block.box(12, 1, 4.914213562373096, 13, 2, 10.914213562373096),
            Block.box(3, 1, 4.914213562373096, 4, 2, 10.914213562373096),
            Block.box(5, 1, 2.914213562373096, 11, 2, 3.914213562373096),
            Block.box(3, 11, 0.9142135623730958, 13, 12, 1.9142135623730958),
            Block.box(3, 11, 13.914213562373096, 13, 12, 14.914213562373096),
            Block.box(14, 11, 2.914213562373096, 15, 12, 12.914213562373096),
            Block.box(13, 1, 4.914213562373096, 14, 2, 10.914213562373096),
            Block.box(13, 10, 2.914213562373096, 14, 11, 12.914213562373096),
            Block.box(2, 10, 2.914213562373096, 3, 11, 12.914213562373096),
            Block.box(3, 10, 12.914213562373096, 13, 11, 13.914213562373096),
            Block.box(3, 10, 1.9142135623730958, 13, 11, 2.914213562373096),
            Block.box(2, 1, 4.914213562373096, 3, 2, 10.914213562373096),
            Block.box(5, 1, 12.914213562373096, 11, 2, 13.914213562373096),
            Block.box(5, 1, 1.9142135623730958, 11, 2, 2.914213562373096),
            Block.box(1, 11, 2.914213562373096, 2, 12, 12.914213562373096),
            Block.box(2, 11, 2.914213562373096, 3, 12, 3.914213562373096),
            Block.box(3, 11, 1.9142135623730958, 4, 12, 2.914213562373096),
            Block.box(2, 11, 1.9142135623730958, 3, 12, 2.914213562373096),
            Block.box(2, 11, 12.914213562373096, 3, 12, 13.914213562373096),
            Block.box(3, 11, 12.914213562373096, 4, 12, 13.914213562373096),
            Block.box(13, 11, 11.914213562373096, 14, 12, 12.914213562373096),
            Block.box(13, 11, 12.914213562373096, 14, 12, 13.914213562373096),
            Block.box(12, 11, 12.914213562373096, 13, 12, 13.914213562373096),
            Block.box(12, 11, 1.9142135623730958, 13, 12, 2.914213562373096),
            Block.box(13, 11, 1.9142135623730958, 14, 12, 2.914213562373096),
            Block.box(13, 11, 2.914213562373096, 14, 12, 3.914213562373096),
            Block.box(3, 1, 2.914213562373096, 5, 2, 4.914213562373096),
            Block.box(11, 1, 2.914213562373096, 13, 2, 4.914213562373096),
            Block.box(12, 2, 11.914213562373096, 13, 10, 12.914213562373096),
            Block.box(12, 2, 2.914213562373096, 13, 10, 3.914213562373096),
            Block.box(3, 2, 2.914213562373096, 4, 10, 3.914213562373096),
            Block.box(3, 2, 11.914213562373096, 4, 10, 12.914213562373096),
            Block.box(2, 11, 11.914213562373096, 3, 12, 12.914213562373096),
            Block.box(15, 9.383883476483184, 3.8262716319083037, 16, 10.383883476483184, 11.826271631908304),
            Block.box(14, 9.383883476483184, 11.826271631908304, 15, 10.383883476483184, 12.826271631908304),
            Block.box(1, 9.383883476483184, 11.826271631908304, 2, 10.383883476483184, 12.826271631908304),
            Block.box(0, 9.383883476483184, 3.8262716319083037, 1, 10.383883476483184, 11.826271631908304),
            Block.box(2, 0.13083514927824424, 11.340990257669734, 14, 1.1308351492782442, 12.340990257669734)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();

    public static final VoxelShape WEST = Stream.of(
            Block.box(4.042893218813452, 2, 12.957106781186548, 12.042893218813452, 10, 13.957106781186548),
            Block.box(13.042893218813452, 2, 3.957106781186548, 14.042893218813452, 10, 11.957106781186548),
            Block.box(2.042893218813452, 2, 3.957106781186548, 3.042893218813452, 10, 11.957106781186548),
            Block.box(4.042893218813452, 2, 1.957106781186548, 12.042893218813452, 10, 2.957106781186548),
            Block.box(4.042893218813452, 0, 3.957106781186548, 12.042893218813452, 1, 11.957106781186548),
            Block.box(3.042893218813452, 1, 10.957106781186548, 5.042893218813452, 2, 12.957106781186548),
            Block.box(3.042893218813452, 1, 2.957106781186548, 5.042893218813452, 2, 4.957106781186548),
            Block.box(3.042893218813452, 1, 4.957106781186548, 4.042893218813452, 2, 10.957106781186548),
            Block.box(5.042893218813452, 1, 11.957106781186548, 11.042893218813452, 2, 12.957106781186548),
            Block.box(5.042893218813452, 1, 2.957106781186548, 11.042893218813452, 2, 3.957106781186548),
            Block.box(12.042893218813452, 1, 4.957106781186548, 13.042893218813452, 2, 10.957106781186548),
            Block.box(14.042893218813452, 11, 2.957106781186548, 15.042893218813452, 12, 12.957106781186548),
            Block.box(1.042893218813452, 11, 2.957106781186548, 2.042893218813452, 12, 12.957106781186548),
            Block.box(3.042893218813452, 11, 13.957106781186548, 13.042893218813452, 12, 14.957106781186548),
            Block.box(5.042893218813452, 1, 12.957106781186548, 11.042893218813452, 2, 13.957106781186548),
            Block.box(3.042893218813452, 10, 12.957106781186548, 13.042893218813452, 11, 13.957106781186548),
            Block.box(3.042893218813452, 10, 1.957106781186548, 13.042893218813452, 11, 2.957106781186548),
            Block.box(2.042893218813452, 10, 2.957106781186548, 3.042893218813452, 11, 12.957106781186548),
            Block.box(13.042893218813452, 10, 2.957106781186548, 14.042893218813452, 11, 12.957106781186548),
            Block.box(5.042893218813452, 1, 1.957106781186548, 11.042893218813452, 2, 2.957106781186548),
            Block.box(2.042893218813452, 1, 4.957106781186548, 3.042893218813452, 2, 10.957106781186548),
            Block.box(13.042893218813452, 1, 4.957106781186548, 14.042893218813452, 2, 10.957106781186548),
            Block.box(3.042893218813452, 11, 0.9571067811865479, 13.042893218813452, 12, 1.957106781186548),
            Block.box(12.042893218813452, 11, 1.957106781186548, 13.042893218813452, 12, 2.957106781186548),
            Block.box(13.042893218813452, 11, 2.957106781186548, 14.042893218813452, 12, 3.957106781186548),
            Block.box(13.042893218813452, 11, 1.957106781186548, 14.042893218813452, 12, 2.957106781186548),
            Block.box(2.042893218813452, 11, 1.957106781186548, 3.042893218813452, 12, 2.957106781186548),
            Block.box(2.042893218813452, 11, 2.957106781186548, 3.042893218813452, 12, 3.957106781186548),
            Block.box(3.042893218813452, 11, 12.957106781186548, 4.042893218813452, 12, 13.957106781186548),
            Block.box(2.042893218813452, 11, 12.957106781186548, 3.042893218813452, 12, 13.957106781186548),
            Block.box(2.042893218813452, 11, 11.957106781186548, 3.042893218813452, 12, 12.957106781186548),
            Block.box(13.042893218813452, 11, 11.957106781186548, 14.042893218813452, 12, 12.957106781186548),
            Block.box(13.042893218813452, 11, 12.957106781186548, 14.042893218813452, 12, 13.957106781186548),
            Block.box(12.042893218813452, 11, 12.957106781186548, 13.042893218813452, 12, 13.957106781186548),
            Block.box(11.042893218813452, 1, 2.957106781186548, 13.042893218813452, 2, 4.957106781186548),
            Block.box(11.042893218813452, 1, 10.957106781186548, 13.042893218813452, 2, 12.957106781186548),
            Block.box(3.042893218813452, 2, 11.957106781186548, 4.042893218813452, 10, 12.957106781186548),
            Block.box(12.042893218813452, 2, 11.957106781186548, 13.042893218813452, 10, 12.957106781186548),
            Block.box(12.042893218813452, 2, 2.957106781186548, 13.042893218813452, 10, 3.957106781186548),
            Block.box(3.042893218813452, 2, 2.957106781186548, 4.042893218813452, 10, 3.957106781186548),
            Block.box(3.042893218813452, 11, 1.957106781186548, 4.042893218813452, 12, 2.957106781186548),
            Block.box(4.130835149278244, 9.383883476483184, 14.957106781186548, 12.130835149278244, 10.383883476483184, 15.957106781186548),
            Block.box(3.1308351492782442, 9.383883476483184, 13.957106781186548, 4.130835149278244, 10.383883476483184, 14.957106781186548),
            Block.box(3.1308351492782442, 9.383883476483184, 0.9571067811865479, 4.130835149278244, 10.383883476483184, 1.957106781186548),
            Block.box(4.130835149278244, 9.383883476483184, -0.042893218813452094, 12.130835149278244, 10.383883476483184, 0.9571067811865479),
            Block.box(3.616116523516814, 0.13083514927824424, 1.957106781186548, 4.616116523516814, 1.1308351492782442, 13.957106781186548)
    ).reduce((v1, v2) -> Shapes.join(v1, v2,BooleanOp.OR)).get();
}
